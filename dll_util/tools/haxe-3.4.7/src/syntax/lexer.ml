# 20 "src/syntax/lexer.mll"
 
open Lexing
open Ast
open Globals

type error_msg =
	| Invalid_character of char
	| Unterminated_string
	| Unterminated_regexp
	| Unclosed_comment
	| Unclosed_code
	| Invalid_escape of char
	| Invalid_option

exception Error of error_msg * pos

let error_msg = function
	| Invalid_character c when int_of_char c > 32 && int_of_char c < 128 -> Printf.sprintf "Invalid character '%c'" c
	| Invalid_character c -> Printf.sprintf "Invalid character 0x%.2X" (int_of_char c)
	| Unterminated_string -> "Unterminated string"
	| Unterminated_regexp -> "Unterminated regular expression"
	| Unclosed_comment -> "Unclosed comment"
	| Unclosed_code -> "Unclosed code string"
	| Invalid_escape c -> Printf.sprintf "Invalid escape sequence \\%s" (Char.escaped c)
	| Invalid_option -> "Invalid regular expression option"

type lexer_file = {
	lfile : string;
	mutable lline : int;
	mutable lmaxline : int;
	mutable llines : (int * int) list;
	mutable lalines : (int * int) array;
	mutable lstrings : int list;
	mutable llast : int;
	mutable llastindex : int;
}

let make_file file =
	{
		lfile = file;
		lline = 1;
		lmaxline = 1;
		llines = [0,1];
		lalines = [|0,1|];
		lstrings = [];
		llast = max_int;
		llastindex = 0;
	}


let cur = ref (make_file "")

let all_files = Hashtbl.create 0

let buf = Buffer.create 100

let error e pos =
	raise (Error (e,{ pmin = pos; pmax = pos; pfile = !cur.lfile }))

let keywords =
	let h = Hashtbl.create 3 in
	List.iter (fun k -> Hashtbl.add h (s_keyword k) k)
		[Function;Class;Static;Var;If;Else;While;Do;For;
		Break;Return;Continue;Extends;Implements;Import;
		Switch;Case;Default;Public;Private;Try;Untyped;
		Catch;New;This;Throw;Extern;Enum;In;Interface;
		Cast;Override;Dynamic;Typedef;Package;
		Inline;Using;Null;True;False;Abstract;Macro];
	h

let init file do_add =
	let f = make_file file in
	cur := f;
	if do_add then Hashtbl.replace all_files file f

let save() =
	!cur

let restore c =
	cur := c

let newline lexbuf =
	let cur = !cur in
	cur.lline <- cur.lline + 1;
	cur.llines <- (lexeme_end lexbuf,cur.lline) :: cur.llines

let fmt_pos p =
	p.pmin + (p.pmax - p.pmin) * 1000000

let add_fmt_string p =
	let file = (try
		Hashtbl.find all_files p.pfile
	with Not_found ->
		let f = make_file p.pfile in
		Hashtbl.replace all_files p.pfile f;
		f
	) in
	file.lstrings <- (fmt_pos p) :: file.lstrings

let fast_add_fmt_string p =
	let cur = !cur in
	cur.lstrings <- (fmt_pos p) :: cur.lstrings

let is_fmt_string p =
	try
		let file = Hashtbl.find all_files p.pfile in
		List.mem (fmt_pos p) file.lstrings
	with Not_found ->
		false

let remove_fmt_string p =
	try
		let file = Hashtbl.find all_files p.pfile in
		file.lstrings <- List.filter ((<>) (fmt_pos p)) file.lstrings
	with Not_found ->
		()

let find_line p f =
	(* rebuild cache if we have a new line *)
	if f.lmaxline <> f.lline then begin
		f.lmaxline <- f.lline;
		f.lalines <- Array.of_list (List.rev f.llines);
		f.llast <- max_int;
		f.llastindex <- 0;
	end;
	let rec loop min max =
		let med = (min + max) lsr 1 in
		let lp, line = Array.unsafe_get f.lalines med in
		if med = min then begin
			f.llast <- p;
			f.llastindex <- med;
			line, p - lp
		end else if lp > p then
			loop min med
		else
			loop med max
	in
	if p >= f.llast then begin
		let lp, line = Array.unsafe_get f.lalines f.llastindex in
		let lp2 = if f.llastindex = Array.length f.lalines - 1 then max_int else fst(Array.unsafe_get f.lalines (f.llastindex + 1)) in
		if p >= lp && p < lp2 then line, p - lp else loop 0 (Array.length f.lalines)
	end else
		loop 0 (Array.length f.lalines)

(* resolve a position within a non-haxe file by counting newlines *)
let resolve_pos file =
	let ch = open_in_bin file in
	let f = make_file file in
	let rec loop p =
		let inc i () =
			f.lline <- f.lline + 1;
			f.llines <- (p + i,f.lline) :: f.llines;
			i
		in
		let i = match input_char ch with
			| '\n' -> inc 1
			| '\r' ->
				ignore(input_char ch);
				inc 2
			| _ -> fun () -> 1
		in
		loop (p + i())
	in
	try
		loop 0
	with End_of_file ->
		close_in ch;
		f

let find_file file =
	try Hashtbl.find all_files file with Not_found -> try resolve_pos file with Sys_error _ -> make_file file

let find_pos p =
	find_line p.pmin (find_file p.pfile)

let get_error_line p =
	let l, _ = find_pos p in
	l

let get_pos_coords p =
	let file = find_file p.pfile in
	let l1, p1 = find_line p.pmin file in
	let l2, p2 = find_line p.pmax file in
	l1, p1, l2, p2

let get_error_pos printer p =
	if p.pmin = -1 then
		"(unknown)"
	else
		let l1, p1, l2, p2 = get_pos_coords p in
		if l1 = l2 then begin
			let s = (if p1 = p2 then Printf.sprintf " %d" p1 else Printf.sprintf "s %d-%d" p1 p2) in
			Printf.sprintf "%s character%s" (printer p.pfile l1) s
		end else
			Printf.sprintf "%s lines %d-%d" (printer p.pfile l1) l1 l2

let reset() = Buffer.reset buf
let contents() = Buffer.contents buf
let store lexbuf = Buffer.add_string buf (lexeme lexbuf)
let add c = Buffer.add_string buf c

let mk_tok t pmin pmax =
	t , { pfile = !cur.lfile; pmin = pmin; pmax = pmax }

let mk lexbuf t =
	mk_tok t (lexeme_start lexbuf) (lexeme_end lexbuf)

let mk_ident lexbuf =
	let s = lexeme lexbuf in
	mk lexbuf (try Kwd (Hashtbl.find keywords s) with Not_found -> Const (Ident s))

let invalid_char lexbuf =
	error (Invalid_character (lexeme_char lexbuf 0)) (lexeme_start lexbuf)


# 218 "src/syntax/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\253\255\000\000\000\000\000\000\255\255\001\000\006\000\
    \188\255\095\000\198\000\017\001\092\001\120\001\194\255\195\255\
    \197\255\198\255\199\255\200\255\201\255\202\255\203\255\204\255\
    \215\255\216\255\217\255\218\255\037\000\072\000\075\000\041\000\
    \076\000\094\000\181\000\077\000\092\000\095\000\098\000\179\000\
    \179\000\197\001\198\001\252\255\000\000\000\000\255\255\253\255\
    \220\001\232\001\254\001\036\002\096\000\064\002\074\002\096\002\
    \106\002\245\255\116\002\128\002\107\000\138\002\222\255\196\255\
    \233\255\023\001\236\255\243\255\223\255\235\255\242\255\193\255\
    \240\255\093\000\239\255\230\255\097\000\238\255\231\255\237\255\
    \234\255\227\255\125\000\232\255\221\255\229\255\228\255\148\002\
    \223\002\042\003\117\003\141\001\142\001\141\000\002\000\254\255\
    \255\255\253\255\047\002\048\002\250\255\223\001\003\000\254\255\
    \255\255\252\255\253\255\230\003\231\003\208\000\250\255\202\000\
    \007\000\254\255\255\255\249\255\251\255\252\255\248\255\237\003\
    \238\003\250\255\251\255\252\255\034\001\253\255\008\000\254\255\
    \255\255\025\002\249\255\166\003\198\003\246\255\002\004\255\255\
    \247\255\080\004\249\255\250\255\251\255\252\255\253\255\254\255\
    \103\004\194\004\217\004\248\255\223\004\254\255\255\255";
  Lexing.lex_backtrk =
   "\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\066\000\065\000\065\000\064\000\067\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\035\000\050\000\036\000\047\000\
    \045\000\044\000\043\000\042\000\014\000\049\000\046\000\048\000\
    \041\000\005\000\005\000\255\255\003\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\255\255\006\000\009\000\
    \255\255\255\255\008\000\255\255\255\255\007\000\255\255\255\255\
    \255\255\011\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\255\255\255\255\030\000\255\255\255\255\255\255\
    \255\255\255\255\031\000\255\255\255\255\255\255\255\255\063\000\
    \063\000\063\000\065\000\255\255\004\000\003\000\001\000\255\255\
    \255\255\255\255\255\255\006\000\255\255\004\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\008\000\006\000\255\255\002\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\255\255\255\255\255\255\002\000\255\255\001\000\255\255\
    \255\255\007\000\255\255\255\255\010\000\255\255\255\255\255\255\
    \255\255\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\255\255\000\000\006\000\008\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\092\000\092\000\255\255\255\255\000\000\
    \000\000\000\000\099\000\099\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\108\000\108\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
    \120\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\129\000\000\000\132\000\132\000\000\000\136\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\047\000\255\255\095\000\103\000\255\255\045\000\
    \043\000\113\000\127\000\044\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \045\000\006\000\000\000\002\000\000\000\000\000\045\000\028\000\
    \015\000\013\000\012\000\035\000\034\000\014\000\019\000\018\000\
    \031\000\038\000\024\000\037\000\040\000\039\000\042\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \025\000\026\000\030\000\029\000\027\000\017\000\016\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\023\000\086\000\022\000\032\000\011\000\080\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\021\000\033\000\020\000\036\000\085\000\084\000\082\000\
    \081\000\079\000\072\000\071\000\070\000\067\000\057\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\062\000\075\000\077\000\069\000\068\000\078\000\066\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\083\000\004\000\097\000\000\000\009\000\005\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\076\000\073\000\000\000\063\000\000\000\000\000\
    \000\000\060\000\065\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\000\000\115\000\003\000\
    \064\000\116\000\074\000\000\000\115\000\000\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\046\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\255\255\000\000\000\000\255\255\010\000\117\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\118\000\130\000\000\000\000\000\000\000\
    \000\000\129\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\000\000\095\000\
    \255\255\000\000\094\000\255\255\000\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\093\000\
    \255\255\000\000\000\000\012\000\000\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\088\000\
    \000\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\049\000\049\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
    \000\000\106\000\000\000\000\000\000\000\000\000\000\000\059\000\
    \000\000\059\000\048\000\048\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\052\000\255\255\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\048\000\048\000\000\000\053\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \000\000\103\000\255\255\105\000\102\000\255\255\050\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
    \000\000\100\000\255\255\000\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\000\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\056\000\000\000\056\000\000\000\000\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\000\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\101\000\255\255\096\000\255\255\053\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\000\000\053\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
    \000\000\000\000\000\000\087\000\000\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\104\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\088\000\000\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\000\000\000\000\000\000\
    \000\000\089\000\000\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\000\000\
    \135\000\000\000\000\000\135\000\000\000\000\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \255\255\000\000\000\000\255\255\090\000\133\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \113\000\255\255\000\000\112\000\255\255\255\255\000\000\127\000\
    \255\255\000\000\126\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\109\000\255\255\000\000\110\000\255\255\122\000\
    \255\255\000\000\000\000\000\000\121\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\124\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\139\000\000\000\
    \000\000\000\000\139\000\139\000\139\000\139\000\000\000\139\000\
    \139\000\143\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\000\000\000\000\000\000\000\000\
    \000\000\139\000\111\000\255\255\138\000\000\000\138\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\138\000\000\000\137\000\
    \000\000\138\000\000\000\000\000\000\000\139\000\139\000\139\000\
    \139\000\000\000\000\000\000\000\138\000\000\000\138\000\000\000\
    \125\000\255\255\123\000\255\255\000\000\000\000\000\000\000\000\
    \141\000\000\000\000\000\000\000\142\000\138\000\140\000\137\000\
    \000\000\138\000\138\000\000\000\000\000\139\000\139\000\139\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\144\000\144\000\144\000\144\000\144\000\144\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\000\000\000\000\000\000\000\000\000\000\135\000\000\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\000\000\000\000\
    \000\000\144\000\144\000\144\000\144\000\144\000\144\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\114\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\128\000\255\255\000\000\
    \000\000\000\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\146\000\146\000\146\000\146\000\146\000\
    \146\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \000\000\000\000\000\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\150\000\149\000\
    \150\000\149\000\149\000\149\000\150\000\149\000\149\000\149\000\
    \149\000\149\000\150\000\149\000\150\000\149\000\149\000\149\000\
    \149\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\045\000\044\000\006\000\094\000\102\000\006\000\007\000\
    \007\000\112\000\126\000\007\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \045\000\002\000\255\255\000\000\255\255\255\255\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\028\000\007\000\007\000\007\000\031\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\029\000\029\000\030\000\
    \030\000\032\000\035\000\036\000\037\000\038\000\052\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\060\000\073\000\033\000\037\000\037\000\076\000\038\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\082\000\003\000\093\000\255\255\009\000\004\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\033\000\034\000\255\255\039\000\255\255\255\255\
    \255\255\040\000\039\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\255\255\111\000\000\000\
    \039\000\111\000\034\000\255\255\109\000\255\255\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \000\000\006\000\255\255\255\255\255\255\255\255\007\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\065\000\255\255\255\255\065\000\010\000\111\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\109\000\124\000\255\255\255\255\255\255\
    \255\255\124\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\
    \011\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\255\255\091\000\
    \092\000\255\255\091\000\092\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\091\000\
    \092\000\255\255\255\255\012\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
    \255\255\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\041\000\042\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\255\255\
    \255\255\101\000\255\255\255\255\255\255\255\255\255\255\048\000\
    \255\255\048\000\041\000\042\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\049\000\065\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\255\255\129\000\255\255\255\255\129\000\255\255\
    \255\255\255\255\041\000\042\000\255\255\049\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\098\000\099\000\101\000\098\000\099\000\042\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\255\255\255\255\
    \255\255\098\000\099\000\255\255\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\255\255\050\000\
    \050\000\050\000\050\000\050\000\050\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\053\000\255\255\053\000\255\255\255\255\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\255\255\051\000\051\000\051\000\
    \051\000\051\000\051\000\098\000\099\000\091\000\092\000\054\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\255\255\054\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\255\255\
    \255\255\255\255\255\255\087\000\255\255\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\129\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\098\000\
    \099\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\088\000\255\255\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\255\255\255\255\255\255\
    \255\255\089\000\255\255\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\255\255\
    \131\000\255\255\255\255\131\000\255\255\255\255\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \132\000\255\255\255\255\132\000\090\000\131\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \107\000\108\000\255\255\107\000\108\000\132\000\255\255\119\000\
    \120\000\255\255\119\000\120\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\131\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\107\000\108\000\255\255\107\000\108\000\119\000\
    \120\000\255\255\255\255\255\255\119\000\120\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\119\000\120\000\255\255\255\255\
    \255\255\255\255\132\000\255\255\255\255\255\255\134\000\255\255\
    \255\255\255\255\134\000\134\000\134\000\134\000\255\255\134\000\
    \134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
    \134\000\134\000\134\000\134\000\255\255\255\255\255\255\255\255\
    \255\255\134\000\107\000\108\000\134\000\255\255\134\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\134\000\255\255\134\000\
    \255\255\134\000\255\255\255\255\255\255\134\000\134\000\134\000\
    \134\000\255\255\255\255\255\255\134\000\255\255\134\000\255\255\
    \119\000\120\000\119\000\120\000\255\255\255\255\255\255\255\255\
    \134\000\255\255\255\255\255\255\134\000\134\000\134\000\134\000\
    \255\255\134\000\134\000\255\255\255\255\134\000\134\000\134\000\
    \137\000\137\000\137\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\137\000\137\000\137\000\137\000\137\000\137\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\255\255\255\255\255\255\255\255\255\255\131\000\255\255\
    \144\000\144\000\144\000\144\000\144\000\144\000\255\255\255\255\
    \255\255\137\000\137\000\137\000\137\000\137\000\137\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\132\000\255\255\
    \144\000\144\000\144\000\144\000\144\000\144\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\107\000\108\000\
    \255\255\255\255\255\255\255\255\255\255\119\000\120\000\255\255\
    \255\255\255\255\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\134\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\146\000\146\000\146\000\146\000\146\000\146\000\
    \255\255\255\255\255\255\145\000\145\000\145\000\145\000\145\000\
    \145\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\146\000\146\000\146\000\146\000\146\000\146\000\
    \148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
    \148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
    \148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
    \148\000\148\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec skip_header lexbuf =
   __ocaml_lex_skip_header_rec lexbuf 0
and __ocaml_lex_skip_header_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 241 "src/syntax/lexer.mll"
                  ( skip_header lexbuf )
# 681 "src/syntax/lexer.ml"

  | 1 ->
# 242 "src/syntax/lexer.mll"
                      ( skip_header lexbuf )
# 686 "src/syntax/lexer.ml"

  | 2 ->
# 243 "src/syntax/lexer.mll"
            ( )
# 691 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_header_rec lexbuf __ocaml_lex_state

and token lexbuf =
   __ocaml_lex_token_rec lexbuf 7
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 246 "src/syntax/lexer.mll"
       ( mk lexbuf Eof )
# 703 "src/syntax/lexer.ml"

  | 1 ->
# 247 "src/syntax/lexer.mll"
               ( token lexbuf )
# 708 "src/syntax/lexer.ml"

  | 2 ->
# 248 "src/syntax/lexer.mll"
          ( newline lexbuf; token lexbuf )
# 713 "src/syntax/lexer.ml"

  | 3 ->
# 249 "src/syntax/lexer.mll"
               ( newline lexbuf; token lexbuf )
# 718 "src/syntax/lexer.ml"

  | 4 ->
# 250 "src/syntax/lexer.mll"
                                   ( mk lexbuf (Const (Int (lexeme lexbuf))) )
# 723 "src/syntax/lexer.ml"

  | 5 ->
# 251 "src/syntax/lexer.mll"
           ( mk lexbuf (Const (Int (lexeme lexbuf))) )
# 728 "src/syntax/lexer.ml"

  | 6 ->
# 252 "src/syntax/lexer.mll"
                          ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 733 "src/syntax/lexer.ml"

  | 7 ->
# 253 "src/syntax/lexer.mll"
                  ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 738 "src/syntax/lexer.ml"

  | 8 ->
# 254 "src/syntax/lexer.mll"
                                           ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 743 "src/syntax/lexer.ml"

  | 9 ->
# 255 "src/syntax/lexer.mll"
                                                          ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 748 "src/syntax/lexer.ml"

  | 10 ->
# 256 "src/syntax/lexer.mll"
                 (
			let s = lexeme lexbuf in
			mk lexbuf (IntInterval (String.sub s 0 (String.length s - 3)))
		)
# 756 "src/syntax/lexer.ml"

  | 11 ->
# 260 "src/syntax/lexer.mll"
                       (
			let s = lexeme lexbuf in
			mk lexbuf (CommentLine (String.sub s 2 ((String.length s)-2)))
		)
# 764 "src/syntax/lexer.ml"

  | 12 ->
# 264 "src/syntax/lexer.mll"
        ( mk lexbuf (Unop Increment) )
# 769 "src/syntax/lexer.ml"

  | 13 ->
# 265 "src/syntax/lexer.mll"
        ( mk lexbuf (Unop Decrement) )
# 774 "src/syntax/lexer.ml"

  | 14 ->
# 266 "src/syntax/lexer.mll"
        ( mk lexbuf (Unop NegBits) )
# 779 "src/syntax/lexer.ml"

  | 15 ->
# 267 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpMod)) )
# 784 "src/syntax/lexer.ml"

  | 16 ->
# 268 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpAnd)) )
# 789 "src/syntax/lexer.ml"

  | 17 ->
# 269 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpOr)) )
# 794 "src/syntax/lexer.ml"

  | 18 ->
# 270 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpXor)) )
# 799 "src/syntax/lexer.ml"

  | 19 ->
# 271 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpAdd)) )
# 804 "src/syntax/lexer.ml"

  | 20 ->
# 272 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpSub)) )
# 809 "src/syntax/lexer.ml"

  | 21 ->
# 273 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpMult)) )
# 814 "src/syntax/lexer.ml"

  | 22 ->
# 274 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpDiv)) )
# 819 "src/syntax/lexer.ml"

  | 23 ->
# 275 "src/syntax/lexer.mll"
         ( mk lexbuf (Binop (OpAssignOp OpShl)) )
# 824 "src/syntax/lexer.ml"

  | 24 ->
# 276 "src/syntax/lexer.mll"
         ( mk lexbuf (Binop (OpAssignOp OpBoolOr)) )
# 829 "src/syntax/lexer.ml"

  | 25 ->
# 277 "src/syntax/lexer.mll"
         ( mk lexbuf (Binop (OpAssignOp OpBoolAnd)) )
# 834 "src/syntax/lexer.ml"

  | 26 ->
# 280 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpEq) )
# 839 "src/syntax/lexer.ml"

  | 27 ->
# 281 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpNotEq) )
# 844 "src/syntax/lexer.ml"

  | 28 ->
# 282 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpLte) )
# 849 "src/syntax/lexer.ml"

  | 29 ->
# 284 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpBoolAnd) )
# 854 "src/syntax/lexer.ml"

  | 30 ->
# 285 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpBoolOr) )
# 859 "src/syntax/lexer.ml"

  | 31 ->
# 286 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpShl) )
# 864 "src/syntax/lexer.ml"

  | 32 ->
# 287 "src/syntax/lexer.mll"
        ( mk lexbuf Arrow )
# 869 "src/syntax/lexer.ml"

  | 33 ->
# 288 "src/syntax/lexer.mll"
         ( mk lexbuf (Binop OpInterval) )
# 874 "src/syntax/lexer.ml"

  | 34 ->
# 289 "src/syntax/lexer.mll"
        ( mk lexbuf (Binop OpArrow))
# 879 "src/syntax/lexer.ml"

  | 35 ->
# 290 "src/syntax/lexer.mll"
       ( mk lexbuf (Unop Not) )
# 884 "src/syntax/lexer.ml"

  | 36 ->
# 291 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpLt) )
# 889 "src/syntax/lexer.ml"

  | 37 ->
# 292 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpGt) )
# 894 "src/syntax/lexer.ml"

  | 38 ->
# 293 "src/syntax/lexer.mll"
       ( mk lexbuf Semicolon )
# 899 "src/syntax/lexer.ml"

  | 39 ->
# 294 "src/syntax/lexer.mll"
       ( mk lexbuf DblDot )
# 904 "src/syntax/lexer.ml"

  | 40 ->
# 295 "src/syntax/lexer.mll"
       ( mk lexbuf Comma )
# 909 "src/syntax/lexer.ml"

  | 41 ->
# 296 "src/syntax/lexer.mll"
       ( mk lexbuf Dot )
# 914 "src/syntax/lexer.ml"

  | 42 ->
# 297 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpMod) )
# 919 "src/syntax/lexer.ml"

  | 43 ->
# 298 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpAnd) )
# 924 "src/syntax/lexer.ml"

  | 44 ->
# 299 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpOr) )
# 929 "src/syntax/lexer.ml"

  | 45 ->
# 300 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpXor) )
# 934 "src/syntax/lexer.ml"

  | 46 ->
# 301 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpAdd) )
# 939 "src/syntax/lexer.ml"

  | 47 ->
# 302 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpMult) )
# 944 "src/syntax/lexer.ml"

  | 48 ->
# 303 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpDiv) )
# 949 "src/syntax/lexer.ml"

  | 49 ->
# 304 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpSub) )
# 954 "src/syntax/lexer.ml"

  | 50 ->
# 305 "src/syntax/lexer.mll"
       ( mk lexbuf (Binop OpAssign) )
# 959 "src/syntax/lexer.ml"

  | 51 ->
# 306 "src/syntax/lexer.mll"
       ( mk lexbuf BkOpen )
# 964 "src/syntax/lexer.ml"

  | 52 ->
# 307 "src/syntax/lexer.mll"
       ( mk lexbuf BkClose )
# 969 "src/syntax/lexer.ml"

  | 53 ->
# 308 "src/syntax/lexer.mll"
       ( mk lexbuf BrOpen )
# 974 "src/syntax/lexer.ml"

  | 54 ->
# 309 "src/syntax/lexer.mll"
       ( mk lexbuf BrClose )
# 979 "src/syntax/lexer.ml"

  | 55 ->
# 310 "src/syntax/lexer.mll"
       ( mk lexbuf POpen )
# 984 "src/syntax/lexer.ml"

  | 56 ->
# 311 "src/syntax/lexer.mll"
       ( mk lexbuf PClose )
# 989 "src/syntax/lexer.ml"

  | 57 ->
# 312 "src/syntax/lexer.mll"
       ( mk lexbuf Question )
# 994 "src/syntax/lexer.ml"

  | 58 ->
# 313 "src/syntax/lexer.mll"
       ( mk lexbuf At )
# 999 "src/syntax/lexer.ml"

  | 59 ->
# 314 "src/syntax/lexer.mll"
        (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try comment lexbuf with Exit -> error Unclosed_comment pmin) in
			mk_tok (Comment (contents())) pmin pmax;
		)
# 1009 "src/syntax/lexer.ml"

  | 60 ->
# 320 "src/syntax/lexer.mll"
       (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try string lexbuf with Exit -> error Unterminated_string pmin) in
			let str = (try unescape (contents()) with Invalid_escape_sequence(c,i) -> error (Invalid_escape c) (pmin + i)) in
			mk_tok (Const (String str)) pmin pmax;
		)
# 1020 "src/syntax/lexer.ml"

  | 61 ->
# 327 "src/syntax/lexer.mll"
       (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try string2 lexbuf with Exit -> error Unterminated_string pmin) in
			let str = (try unescape (contents()) with Invalid_escape_sequence(c,i) -> error (Invalid_escape c) (pmin + i)) in
			let t = mk_tok (Const (String str)) pmin pmax in
			fast_add_fmt_string (snd t);
			t
		)
# 1033 "src/syntax/lexer.ml"

  | 62 ->
# 336 "src/syntax/lexer.mll"
        (
			reset();
			let pmin = lexeme_start lexbuf in
			let options, pmax = (try regexp lexbuf with Exit -> error Unterminated_regexp pmin) in
			let str = contents() in
			mk_tok (Const (Regexp (str,options))) pmin pmax;
		)
# 1044 "src/syntax/lexer.ml"

  | 63 ->
# 343 "src/syntax/lexer.mll"
             (
			let v = lexeme lexbuf in
			let v = String.sub v 1 (String.length v - 1) in
			mk lexbuf (Sharp v)
		)
# 1053 "src/syntax/lexer.ml"

  | 64 ->
# 348 "src/syntax/lexer.mll"
                                      (
			let v = lexeme lexbuf in
			let v = String.sub v 1 (String.length v - 1) in
			mk lexbuf (Dollar v)
		)
# 1062 "src/syntax/lexer.ml"

  | 65 ->
# 353 "src/syntax/lexer.mll"
         ( mk_ident lexbuf )
# 1067 "src/syntax/lexer.ml"

  | 66 ->
# 354 "src/syntax/lexer.mll"
          ( mk lexbuf (Const (Ident (lexeme lexbuf))) )
# 1072 "src/syntax/lexer.ml"

  | 67 ->
# 355 "src/syntax/lexer.mll"
     ( invalid_char lexbuf )
# 1077 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 91
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 358 "src/syntax/lexer.mll"
       ( raise Exit )
# 1089 "src/syntax/lexer.ml"

  | 1 ->
# 359 "src/syntax/lexer.mll"
                        ( newline lexbuf; store lexbuf; comment lexbuf )
# 1094 "src/syntax/lexer.ml"

  | 2 ->
# 360 "src/syntax/lexer.mll"
        ( lexeme_end lexbuf )
# 1099 "src/syntax/lexer.ml"

  | 3 ->
# 361 "src/syntax/lexer.mll"
       ( store lexbuf; comment lexbuf )
# 1104 "src/syntax/lexer.ml"

  | 4 ->
# 362 "src/syntax/lexer.mll"
                     ( store lexbuf; comment lexbuf )
# 1109 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 98
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 365 "src/syntax/lexer.mll"
       ( raise Exit )
# 1121 "src/syntax/lexer.ml"

  | 1 ->
# 366 "src/syntax/lexer.mll"
                        ( newline lexbuf; store lexbuf; string lexbuf )
# 1126 "src/syntax/lexer.ml"

  | 2 ->
# 367 "src/syntax/lexer.mll"
          ( store lexbuf; string lexbuf )
# 1131 "src/syntax/lexer.ml"

  | 3 ->
# 368 "src/syntax/lexer.mll"
          ( store lexbuf; string lexbuf )
# 1136 "src/syntax/lexer.ml"

  | 4 ->
# 369 "src/syntax/lexer.mll"
        ( store lexbuf; string lexbuf )
# 1141 "src/syntax/lexer.ml"

  | 5 ->
# 370 "src/syntax/lexer.mll"
       ( lexeme_end lexbuf )
# 1146 "src/syntax/lexer.ml"

  | 6 ->
# 371 "src/syntax/lexer.mll"
                          ( store lexbuf; string lexbuf )
# 1151 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and string2 lexbuf =
   __ocaml_lex_string2_rec lexbuf 107
and __ocaml_lex_string2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 374 "src/syntax/lexer.mll"
       ( raise Exit )
# 1163 "src/syntax/lexer.ml"

  | 1 ->
# 375 "src/syntax/lexer.mll"
                        ( newline lexbuf; store lexbuf; string2 lexbuf )
# 1168 "src/syntax/lexer.ml"

  | 2 ->
# 376 "src/syntax/lexer.mll"
        ( store lexbuf; string2 lexbuf )
# 1173 "src/syntax/lexer.ml"

  | 3 ->
# 377 "src/syntax/lexer.mll"
          ( store lexbuf; string2 lexbuf )
# 1178 "src/syntax/lexer.ml"

  | 4 ->
# 378 "src/syntax/lexer.mll"
         ( store lexbuf; string2 lexbuf )
# 1183 "src/syntax/lexer.ml"

  | 5 ->
# 379 "src/syntax/lexer.mll"
       ( lexeme_end lexbuf )
# 1188 "src/syntax/lexer.ml"

  | 6 ->
# 380 "src/syntax/lexer.mll"
                      ( store lexbuf; string2 lexbuf )
# 1193 "src/syntax/lexer.ml"

  | 7 ->
# 381 "src/syntax/lexer.mll"
        (
		let pmin = lexeme_start lexbuf in
		store lexbuf;
		(try code_string lexbuf with Exit -> error Unclosed_code pmin);
		string2 lexbuf;
	)
# 1203 "src/syntax/lexer.ml"

  | 8 ->
# 387 "src/syntax/lexer.mll"
                               ( store lexbuf; string2 lexbuf )
# 1208 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string2_rec lexbuf __ocaml_lex_state

and code_string lexbuf =
   __ocaml_lex_code_string_rec lexbuf 119
and __ocaml_lex_code_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 390 "src/syntax/lexer.mll"
       ( raise Exit )
# 1220 "src/syntax/lexer.ml"

  | 1 ->
# 391 "src/syntax/lexer.mll"
                        ( newline lexbuf; store lexbuf; code_string lexbuf )
# 1225 "src/syntax/lexer.ml"

  | 2 ->
# 392 "src/syntax/lexer.mll"
             ( store lexbuf; code_string lexbuf )
# 1230 "src/syntax/lexer.ml"

  | 3 ->
# 393 "src/syntax/lexer.mll"
       ( store lexbuf; (* stop *) )
# 1235 "src/syntax/lexer.ml"

  | 4 ->
# 394 "src/syntax/lexer.mll"
       (
		add "\"";
		let pmin = lexeme_start lexbuf in
		(try ignore(string lexbuf) with Exit -> error Unterminated_string pmin);
		add "\"";
		code_string lexbuf;
	)
# 1246 "src/syntax/lexer.ml"

  | 5 ->
# 401 "src/syntax/lexer.mll"
       (
		add "'";
		let pmin = lexeme_start lexbuf in
		let pmax = (try string2 lexbuf with Exit -> error Unterminated_string pmin) in
		add "'";
		fast_add_fmt_string { pfile = !cur.lfile; pmin = pmin; pmax = pmax };
		code_string lexbuf;
	)
# 1258 "src/syntax/lexer.ml"

  | 6 ->
# 409 "src/syntax/lexer.mll"
        (
		let pmin = lexeme_start lexbuf in
		(try ignore(comment lexbuf) with Exit -> error Unclosed_comment pmin);
		code_string lexbuf;
	)
# 1267 "src/syntax/lexer.ml"

  | 7 ->
# 414 "src/syntax/lexer.mll"
                      ( store lexbuf; code_string lexbuf; )
# 1272 "src/syntax/lexer.ml"

  | 8 ->
# 415 "src/syntax/lexer.mll"
                                       ( store lexbuf; code_string lexbuf; )
# 1277 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_code_string_rec lexbuf __ocaml_lex_state

and regexp lexbuf =
   __ocaml_lex_regexp_rec lexbuf 131
and __ocaml_lex_regexp_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 418 "src/syntax/lexer.mll"
                     ( raise Exit )
# 1289 "src/syntax/lexer.ml"

  | 1 ->
# 419 "src/syntax/lexer.mll"
            ( add "/"; regexp lexbuf )
# 1294 "src/syntax/lexer.ml"

  | 2 ->
# 420 "src/syntax/lexer.mll"
            ( add "\r"; regexp lexbuf )
# 1299 "src/syntax/lexer.ml"

  | 3 ->
# 421 "src/syntax/lexer.mll"
            ( add "\n"; regexp lexbuf )
# 1304 "src/syntax/lexer.ml"

  | 4 ->
# 422 "src/syntax/lexer.mll"
            ( add "\t"; regexp lexbuf )
# 1309 "src/syntax/lexer.ml"

  | 5 ->
# 423 "src/syntax/lexer.mll"
                                                                               ( add (lexeme lexbuf); regexp lexbuf )
# 1314 "src/syntax/lexer.ml"

  | 6 ->
# 424 "src/syntax/lexer.mll"
                                              ( add (lexeme lexbuf); regexp lexbuf )
# 1319 "src/syntax/lexer.ml"

  | 7 ->
# 425 "src/syntax/lexer.mll"
                                                                                                                          ( add (lexeme lexbuf); regexp lexbuf )
# 1324 "src/syntax/lexer.ml"

  | 8 ->
# 426 "src/syntax/lexer.mll"
                 ( error (Invalid_character (lexeme lexbuf).[1]) (lexeme_end lexbuf - 1) )
# 1329 "src/syntax/lexer.ml"

  | 9 ->
# 427 "src/syntax/lexer.mll"
       ( regexp_options lexbuf, lexeme_end lexbuf )
# 1334 "src/syntax/lexer.ml"

  | 10 ->
# 428 "src/syntax/lexer.mll"
                           ( store lexbuf; regexp lexbuf )
# 1339 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_regexp_rec lexbuf __ocaml_lex_state

and regexp_options lexbuf =
   __ocaml_lex_regexp_options_rec lexbuf 148
and __ocaml_lex_regexp_options_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 431 "src/syntax/lexer.mll"
                               (
			let l = lexeme lexbuf in
			l ^ regexp_options lexbuf
		)
# 1354 "src/syntax/lexer.ml"

  | 1 ->
# 435 "src/syntax/lexer.mll"
               ( error Invalid_option (lexeme_start lexbuf) )
# 1359 "src/syntax/lexer.ml"

  | 2 ->
# 436 "src/syntax/lexer.mll"
      ( "" )
# 1364 "src/syntax/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_regexp_options_rec lexbuf __ocaml_lex_state

;;

